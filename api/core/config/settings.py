'''
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
'''

# TODO Make all datetime and date objects timezone specific. It should
# always be UTC timezone, even when datetime/date is added via django
# admin panel. tz=pytz.UTC can be used.

import os

from django.utils import timezone

from core.config import utils

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SECRET_KEY = utils.get_env_value('DJANGO_SECRET_KEY')
DEBUG = utils.get_env_value('DJANGO_DEBUG', 'false').lower() == 'true'
ALLOWED_HOSTS = utils.get_env_value('DJANGO_ALLOWED_HOSTS').split()

# NOTE: psycopg2-binary dependency must be installed to make django app working with postgres.
INSTALLED_APPS = [
    'admin_interface',
    'colorfield',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    'django_prometheus',
    'rest_framework',
    'rest_framework_simplejwt.token_blacklist',
    'channels',
    'corsheaders',
    'authentication',
    'barber',
    'customer',
    'management',
    'tasks',
    'websockets',
]


# NOTE: Corsheaders may be a cause of an issue. Info in case you will be stuck.
MIDDLEWARE = [
    'django_prometheus.middleware.PrometheusBeforeMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django_prometheus.middleware.PrometheusAfterMiddleware',
]


TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

ASGI_APPLICATION = 'core.asgi.application'


DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.postgresql',
        'NAME': utils.get_env_value('POSTGRES_DB'),
        'HOST': utils.get_env_value('POSTGRES_HOST', 'db'),
        'USER': utils.get_env_value('POSTGRES_USER'),
        'PASSWORD': utils.get_env_value('POSTGRES_PASSWORD'),
        'PORT': int(utils.get_env_value('POSTGRES_PORT', '5432')),
    }
}


# NOTE: Remember to override AUTH_USER_MODEL when you want to use a custom User model.
AUTH_USER_MODEL = 'authentication.User'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'core.validators.PasswordLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': ('rest_framework.permissions.AllowAny',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timezone.timedelta(minutes=15),
    'REFRESH_TOKEN_LIFETIME': timezone.timedelta(hours=12),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [utils.get_env_value('CELERY_BROKER_URL')],
        },
    },
}


LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# NOTE: Needed only when using django-admin-interface extension with django version >= 3.0
X_FRAME_OPTIONS = 'SAMEORIGIN'
SILENCED_SYSTEM_CHECKS = ['security.W019']


ROOT_URLCONF = 'core.urls'

MEDIA_URL = utils.get_env_value('DJANGO_MEDIA_URL')
MEDIA_ROOT = '/var/lib/media'

STATIC_URL = utils.get_env_value('DJANGO_STATIC_URL')
STATIC_ROOT = '/var/lib/static'


CORS_ALLOW_CREDENTIALS = (
    utils.get_env_value('DJANGO_CORS_ALLOW_CREDENTIALS', 'false').lower() == 'true'
)
CORS_ORIGIN_ALLOW_ALL = (
    utils.get_env_value('DJANGO_CORS_ORIGIN_ALLOW_ALL', 'false').lower() == 'true'
)
CORS_ALLOWED_ORIGINS = utils.get_env_value('DJANGO_CORS_ALLOWED_ORIGINS').split()
CSRF_TRUSTED_ORIGINS = utils.get_env_value('DJANGO_CSRF_TRUSTED_ORIGINS').split()


CELERY_LOG_LEVEL = utils.get_env_value('CELERY_LOG_LEVEL', 'WARNING')
CELERY_BROKER_URL = utils.get_env_value('CELERY_BROKER_URL')
CELERY_RESULT_BACKEND = utils.get_env_value('CELERY_RESULT_BACKEND')
CELERY_TIMEZONE = 'Europe/Warsaw'
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60


DJANGO_LOG_LEVEL = utils.get_env_value('DJANGO_LOG_LEVEL', 'WARNING')


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file_django': {
            'level': DJANGO_LOG_LEVEL,
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/api/django/django.log',
        },
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/api/django/error.log',
        },
        'file_root': {
            'level': DJANGO_LOG_LEVEL,
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/api/django/root.log',
        },
        'file_celery': {
            'level': CELERY_LOG_LEVEL,
            'class': 'logging.FileHandler',
            'formatter': 'verbose',
            'filename': '/var/log/api/celery/celery.log',
        },
    },
    'root': {
        'handlers': ['console', 'file_root'],
        'level': DJANGO_LOG_LEVEL,
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file_django'],
            'level': DJANGO_LOG_LEVEL,
            'propagate': True,
        },
        'django.request': {
            'handlers': ['console', 'file_error'],
            'level': 'ERROR',
            'propagate': True,
        },
        'celery': {
            'handlers': ['console', 'file_celery'],
            'level': CELERY_LOG_LEVEL,
            'propagate': True,
        },
    },
}
